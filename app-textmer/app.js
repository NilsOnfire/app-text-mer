var createError = require("http-errors");
var express = require("express");
var path = require("path");
var cookieParser = require("cookie-parser");
var logger = require("morgan");
const bodyParser = require("body-parser");

var indexRouter = require("./routes/index");
//var usersRouter = require("./routes/users");
var converter = require("./converter");

var app = express();

// view engine setup
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "hbs");

app.use(logger("dev"));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));
app.use(bodyParser.urlencoded({ extended: false }));

app.use("/", indexRouter);

//app.use("/users", usersRouter);

app.post("/", (req, res) => {
  let head_prompt = `Identifica las entidades, atributos, y la cardinalidad de las relaciones de un modelo entidad relacion y escribelas de esta forma:{
    "EntidadX": {
      "atributo": "string"
  
    },
    "Relacion": {
      "cardinalidad": "1:N",
      "entidades": ["entidadA", "entidadB"],
      "descripcion": "descripcion en 3 palabras de la relacion"
    }
  }, usando el siguiente texto:`;

  let prompt = `${head_prompt} ${req.body.text}`;
let stm = req.body.text;
  // Chat-gpt connection

  const { Configuration, OpenAIApi } = require("openai");
  require("dotenv").config();
  const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const openai = new OpenAIApi(configuration);
  // asyncronic function  to wait the result generated by gpt
  const chapGPT = async (stm,prompt) => {
    const response = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
    });

    //Get data generated by chatgpt from prompt

    let completion = response["data"]["choices"][0]["message"]["content"];

    //Retrieving data by creating mermaid code format erDiagram
    completion = `${completion}`;

    //converting to js object
    const objectMer = JSON.parse(completion);

    //Separating entities and relationships
    const listOfkeys = Object.keys(objectMer);
    const listOfRels = [];
    const listOfEntities = [];

    listOfkeys.forEach((element) => {
      if (objectMer[element]["cardinalidad"]) {
        listOfRels.push(element);
      } else {
        listOfEntities.push(element);
      }
    });

    //functions to convert data in mermaid code ER format
    let entities = converter.getEntitiesWithAttribs(objectMer,listOfEntities);
    let rels = converter.getRelations(objectMer,listOfRels);
    completion = entities + "\n" + rels;
    console.log(completion);

    var data = { texts: { resp: completion, title: "TextMer",stm } };
    console.log(typeof completion);
    res.render("index", data);
  };

  chapGPT(stm,prompt);
});

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render("error");
});

module.exports = app;
