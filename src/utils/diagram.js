const dotenv = require('dotenv');
const { Configuration, OpenAIApi } = require("openai");
const { CHATGPT_CONSTANTS } = require('../constants/chatgpt');
const { splitMermaidObject, getEntitiesWithAttribs, getRelations } = require('./converter');
dotenv.config();

exports.ChatGPT = class {
    #configuration;
    #openai;
    constructor() {
        this.#configuration = new Configuration({
            apiKey: process.env.OPENAI_API_KEY,
        });
        this.#openai = new OpenAIApi(this.#configuration);
    }

    getConfiguration = () => {
        return this.#configuration;
    }

    getOpenAI = () => {
        return this.#openai;
    }
    /**
    * @param {string} input 
    */
    generatePrompt = (input) => {
        let head_prompt = CHATGPT_CONSTANTS.HEAD_PROMPT;
        return `${head_prompt} ${input}`;
    }

    generateResponse = async (input, prompt) => {
        // Chat-gpt connection
        const openai = this.getOpenAI();

        const response = await openai.createChatCompletion({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: prompt }],
        });

        //Get data generated by chatgpt from prompt
        let completion = response["data"]["choices"][0]["message"]["content"].toString();

        //converting to js object
        const objectMer = JSON.parse(completion);

        const { listOfRels, listOfEntities } = splitMermaidObject(objectMer);

        //functions to convert data in mermaid code ER format
        let entities = getEntitiesWithAttribs(objectMer, listOfEntities);
        let rels = getRelations(objectMer, listOfRels);
        completion = entities + "\n" + rels;

        var data = { texts: { resp: completion, title: "TextMer", input } };
        return data;
    };
}